package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JToolBar;

import tests.BasicControlListener;
import tests.BasicToolCommand;
import tools.Command;
import tools.ControlListener;
import tools.DragListener;
import tools.EraserCommand;
import tools.LineCommand;
import tools.Tools;
import tools.Utilities;

public abstract class GridView extends JPanel {
	private Grid grid;
	private List<ControlListener> activeListeners;
	private List<ControlListener> passiveListeners;
	private Tools activeTool = Tools.pencil;
	private GridMediator mediator;
	private Color activeColor = Color.BLUE;
	private int width, height;
	private PreviewPanel previewPnl;
	private CommandToolBar toolBar;
	private final int TOOL_BAR_HEIGHT = 30;
	public GridView(int width, int height, PreviewPanel previewPnl) {
		activeListeners = new ArrayList<>();
		passiveListeners = new ArrayList<>();
		toolBar = new CommandToolBar();
		setLayout(null);
		setPreferredSize(new Dimension(width, height));
		grid = new Grid(50, 50);
		mediator = new GridMediator(this);
		this.width = width;
		this.height = height;
		this.previewPnl = previewPnl;
		add(toolBar);
		toolBar.setBounds(0, 0, width, TOOL_BAR_HEIGHT);
		initListeners();
		activeListeners.get(Tools.toolIDInt(activeTool)).addListenerTo(this);
	}

	public Grid getGrid() {
		return grid;
	}

	public void setActiveTool(Tools toolNum) {
		//TODO add lines that swap the preview panel and the tool bar
		ControlListener newListener = activeListeners.get(Tools.toolIDInt(toolNum));
		ControlListener oldListener = activeListeners.get(Tools.toolIDInt(activeTool));
		oldListener.removeListenerFrom(this);
		newListener.addListenerTo(this);
		activeTool = toolNum;
		//In Testing
		//remove(toolBar);
		remove(toolBar);
		toolBar = activeListeners.get(Tools.toolIDInt(toolNum)).getCommand().getToolBar();
		//toolBar.setPreviewPanel(previewPnl);
		add(toolBar);
		toolBar.setBounds(0, 0, width, TOOL_BAR_HEIGHT);
		toolBar.repaint();
	}

	public Color getActiveColor() {
		return activeColor;
	}

	private void setUpListener(Command cmd, ControlListener listener) {
		listener.setCommand(cmd);
		
		List<ControlListener> addTo = (cmd.isActive()) ? activeListeners : passiveListeners;
		addTo.add(listener);
	}

	private void initListeners() {
		// TODO implement to add all of the controls and listeners
		setUpListener(new LineCommand(), new DragListener(mediator));
		//setUpListener(new BasicToolCommand(), new BasicControlListener(mediator));
		setUpListener(new EraserCommand(), new DragListener(mediator));
	}
	
	public int getToolBarHeight() {
		return TOOL_BAR_HEIGHT;
	}
}
