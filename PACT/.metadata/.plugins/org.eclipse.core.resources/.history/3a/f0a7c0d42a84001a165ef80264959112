package tools;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;

import javax.swing.ImageIcon;

import gui.CommandToolBar;
import gui.Grid;
import tests.ImageFrame;

public class ShapeCommand implements Command {
	private final Tools tool = Tools.shape;
	private Color color = Color.BLACK;
	private int thickness = 1;
	private CommandToolBar cmdBar;
	private List<BiConsumer<Graphics2D, int[]>> shapeFunctions;
	private ComboBoxOption<ImageIcon> comboBox;
	public ShapeCommand(){
		cmdBar = new CommandToolBar();
		shapeFunctions = new ArrayList<>();
		ButtonOption btnOp = new ButtonOption("Color");
		btnOp.setBehavior(x->cmdBar.getPreviewPanel().setPanel("Color", this));
		cmdBar.addOption(btnOp);
		
		TextFieldOption txtOp = new TextFieldOption();
		txtOp.setBehavior(x->this.setThickness(Integer.parseInt(txtOp.getTextField().getText())));
		cmdBar.addOption(txtOp);
		
		comboBox = new ComboBoxOption<>();
		shapeFunctions.add((g, sizes)->g.fillRect(sizes[0], sizes[1], sizes[2], sizes[3]));
		shapeFunctions.add((g, sizes)->g.drawRect(sizes[0], sizes[1], sizes[2], sizes[3]));
		shapeFunctions.add((g, sizes)->g.fillOval(sizes[0], sizes[1], sizes[2], sizes[3]));
		shapeFunctions.add((g, sizes)->g.drawOval(sizes[0], sizes[1], sizes[2], sizes[3]));
		shapeFunctions.forEach(x->comboBox.addComboBoxItem(getComboImage(x)));
		cmdBar.addOption(comboBox);
	}
	@Override
	public void doAction(Grid grid, HashMap<String, Integer> mouseInfo) {
		int width = grid.getView().getWidth();
		int height = grid.getView().getHeight();
		BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		Graphics2D gImg = img.createGraphics();
		gImg.setStroke(new BasicStroke(thickness));
		gImg.setColor(new Color(getToolBar().getPreviewPanel().getPanelVal("Color")));
		int x = mouseInfo.get("Mouse X");
		int y = mouseInfo.get("Mouse Y");
		int x2 = mouseInfo.get("Starting Mouse X");
		int y2 = mouseInfo.get("Starting Mouse Y");
		int startX = (x2<x)?x2:x;
		int startY = (y2<y)?y2:y;
		//gImg.drawRect(startX, startY, Math.abs(x-x2), Math.abs(y-y2));
		shapeFunctions.get(comboBox.getSelectedIndex()).accept(gImg, new int[] {startX, startY, Math.abs(x-x2), Math.abs(y-y2)});
		gImg.dispose();
		grid.setLayer(Tools.toolIDInt(tool)+1, img);

	}

	@Override
	public CommandToolBar getToolBar() {
		return cmdBar;
	}

	@Override
	public boolean isActive() {
		return true;
	}

	@Override
	public Tools getToolID() {
		return tool;
	}

	@Override
	public void setColor(Color col) {
		this.color = col;

	}
	
	public void setThickness(int i) {
		this.thickness = i;
	}
	
	private ImageIcon getComboImage(BiConsumer<Graphics2D, int[]> function) {
		BufferedImage img = new BufferedImage(20, 20, BufferedImage.TYPE_INT_ARGB);
		Graphics2D gImg = img.createGraphics();
		gImg.setColor(Color.black);
		function.accept(gImg, new int[] {1, 1, 16, 16});
		gImg.dispose();
		return new ImageIcon(img);
	}

}
