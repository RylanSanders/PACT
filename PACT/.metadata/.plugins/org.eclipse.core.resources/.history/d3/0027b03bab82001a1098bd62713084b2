package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedList;
import java.util.Random;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;

public class ImprovedColorPanel extends JPanel implements PreviewContentPanel{
	private static final long serialVersionUID = 5817785019505781271L;
	
	private int r = 0, g = 0, b = 0;
	private HexPanel hexPnl;
	private SliderPanel2 slidPnl;
	private ButtonPanel2 btnPnl;
	private int selectionDelay = 100;
	private boolean isUpdated = false;

	public ImprovedColorPanel(PreviewPanel pnl) {
		setPreferredSize(new Dimension(300, 870));
		setLayout(null);
		this.setBorder(BorderFactory.createLineBorder(Color.BLACK));

		hexPnl = new HexPanel(this);
		add(hexPnl);
		hexPnl.setBounds(1, 0, 300, 270);

		btnPnl = new ButtonPanel2(this);
		add(btnPnl);
		btnPnl.setBounds(32, 280, 235, 370);

		slidPnl = new SliderPanel2(this);
		add(slidPnl);
		slidPnl.setBounds(1, 650, 300, 150);

	}
	
	public Color getColor() {
		return new Color(r, g, b);
	}

	public void setColorVar(String var, int val) {
		// Bounds val between 0 and 255
		int finVal = (val > 255) ? 255 : val;
		finVal = (finVal < 0) ? 0 : finVal;

		switch (var) {
		case "R":
			r = finVal;
			break;
		case "G":
			g = finVal;
			break;
		case "B":
			b = finVal;
			break;
		}
		updatePanels();
	}

	public void setColor(Color col) {
		r = col.getRed();
		g = col.getGreen();
		b = col.getBlue();
		updatePanels();
	}

	private void updatePanels() {
		if (!isUpdated) {
			Color newCol = new Color(r, g, b);
			isUpdated = true;
			hexPnl.setMainColor(newCol);
			hexPnl.repaint();
			btnPnl.addColorSelection(newCol);
			btnPnl.repaint();
			slidPnl.setSlidersColor(newCol);
			slidPnl.repaint();
			Thread t = new Thread(() -> {
				try {
					Thread.sleep(selectionDelay);
					isUpdated = false;
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			});
			t.start();
		}

	}

	@Override
	public int getVal(String valName) {
		
		return new Color(r, g, b).getRGB();
	}

	@Override
	public void setVal(String valName, int val) {
		if(valName.equals("Color")) {
			Color col = new Color(val);
			r = col.getRed();
			g = col.getGreen();
			b = col.getBlue();
			updatePanels();
		}
	}
}

class ButtonPanel2 extends JPanel {
	private static final long serialVersionUID = 7850657720761686451L;
	
	private int rowNum = 8, colNum = 5, sqrSize = 40;
	private int startX = 10, startY = 10;
	private int insetX = 5, insetY = 5;
	private ImprovedColorPanel colPnl;
	private java.util.Queue<ColorButton> selectionBtns;

	public ButtonPanel2(ImprovedColorPanel colPnl) {
		super();
		selectionBtns = new LinkedList<>();
		setLayout(null);
		this.colPnl = colPnl;
		ColorButton btn = getButton(getRandColor());
		for (int i = 0; i < rowNum; i++) {
			for (int x = 0; x < colNum; x++) {
				if (i < 4) {
					int c = (x + i * colNum) * 829069;
					Color col = new Color(c);
					btn = getButton(col);
				} else {
					btn = getButton(Color.WHITE);
					selectionBtns.add(btn);
				}
				add(btn);
				btn.setBounds(startX + x * (sqrSize + insetX), startY + i * (sqrSize + insetY), sqrSize, sqrSize);
			}
		}
	}

	private Color getRandColor() {
		Random rand = new Random();
		return new Color(rand.nextInt(255), rand.nextInt(255), rand.nextInt(255));
	}

	private ColorButton getButton(Color c) {
		ColorButton btn = new ColorButton(c);
		btn.setPreferredSize(new Dimension(sqrSize, sqrSize));
		btn.setBackground(c);
		btn.addActionListener(x -> colPnl.setColor(btn.getBackground()));
		return btn;
	}

	public void addColorSelection(Color col) {
		ColorButton btn = selectionBtns.remove();
		btn.setBackground(col);
		btn.setColor(col);
		selectionBtns.add(btn);
	}
}

class ColorButton extends JButton{
	private static final long serialVersionUID = -6529695451610800757L;
	
	private Color col;
	public ColorButton(Color col) {
		this.col = col;
		this.addActionListener(x->this.getParent().requestFocus());
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.setColor(col);
		g.fillRect(0, 0, getWidth(), getHeight());
		g.setColor(Color.black);
		g.drawRect(0, 0, getWidth()-1, getHeight()-1);
	}
	
	public void setColor(Color col) {
		this.col = col;
	}
}

class HexPanel extends JPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2883295187411803958L;
	private Color mainColor;
	private Polygon[] hexes;
	private ImprovedColorPanel colPnl;

	public HexPanel(ImprovedColorPanel colPnl) {
		super();
		mainColor = new Color(150, 150, 150);
		this.colPnl = colPnl;
		hexes = new Polygon[7];
		initHexes();
		this.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				Point p = e.getPoint();
				for (int i = 0; i < hexes.length; i++) {
					if (hexes[i].contains(p)) {
						Color[] arr = varyColorArray(mainColor);
						colPnl.setColor(arr[i]);
						break;
					}
				}
			}
		});
	}

	public void setMainColor(Color col) {
		mainColor = col;
	}

	private void initHexes() {
		int x = 150, y = 150;

		int width = 80;
		int height = (int) (2 * width * Math.sin(Math.toRadians(60.0)));
		int r = (int) (width / 2 / 1.15470053838);
		hexes[0] = getHex(x, y, width);
		hexes[1] = getHex(x, y - height / 2 + 1, width);
		hexes[2] = getHex2((int) (x + 2 * r * Math.sin(Math.toRadians(60))),
				(int) (y - 2 * r * Math.sin(Math.toRadians(30))), width, 60);
		hexes[3] = getHex2((int) (x + 2 * r * Math.sin(Math.toRadians(60))),
				(int) (y + 2 * r * Math.sin(Math.toRadians(30))), width, 120);
		hexes[4] = getHex(x, y + height / 2 - 1, width);
		hexes[5] = getHex2((int) (x - 2 * r * Math.sin(Math.toRadians(60))),
				(int) (y + 2 * r * Math.sin(Math.toRadians(30))), width, 60);
		hexes[6] = getHex2((int) (x - 2 * r * Math.sin(Math.toRadians(60))),
				(int) (y - 2 * r * Math.sin(Math.toRadians(30))), width, 60);
	}

	private Point rotatePoint(int x, int y, int a, int b, double theta) {
		int x2 = (int) ((x - a) * Math.cos(Math.toRadians(theta)) - (y - b) * Math.sin(Math.toRadians(theta)) + a);
		int y2 = (int) ((x - a) * Math.sin(Math.toRadians(theta)) + (y - b) * Math.cos(Math.toRadians(theta)) + b);
		return new Point(x2, y2);
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		drawSuperHex(g, 150, 150, 80);
	}

	private Polygon getHex2(int x, int y, int width, double theta) {
		int a = width / 2;
		int yDiff = (int) (Math.sqrt(3) * a * 0.5);
		int[] xs = new int[] { x - a / 2, x + a / 2, x + width / 2, x + a / 2, x - a / 2, x - width / 2 };
		int[] ys = new int[] { y - yDiff, y - yDiff, y, y + yDiff, y + yDiff, y };
		for (int i = 0; i < xs.length; i++) {
			Point temp = rotatePoint(xs[i], ys[i], x, y, theta);
			xs[i] = temp.x;
			ys[i] = temp.y;
		}
		return new Polygon(xs, ys, 6);
	}

	private Polygon getHex(int x, int y, int width) {
		int a = width / 2;
		int yDiff = (int) (Math.sqrt(3) * a * 0.5);
		int[] xs = new int[] { x - a / 2, x + a / 2, x + width / 2, x + a / 2, x - a / 2, x - width / 2 };
		int[] ys = new int[] { y - yDiff, y - yDiff, y, y + yDiff, y + yDiff, y };
		return new Polygon(xs, ys, 6);
	}

	private void drawSuperHex(Graphics g, int x, int y, int width) {
		Graphics2D g2 = (Graphics2D) g.create();
		Color[] cols = varyColorArray(mainColor);
		for (int i = 0; i < hexes.length; i++) {
			g2.setColor(cols[i]);
			g2.fill(hexes[i]);
			if (i == 0)
				g2.setStroke(new BasicStroke(3));
			else
				g2.setStroke(new BasicStroke(1));
			g2.setColor(Color.BLACK);
			g2.draw(hexes[i]);
		}
	}

	private Color[] varyColorArray(Color col) {
		int diff = 20;
		Color[] toRet = new Color[7];
		toRet[0] = col;
		toRet[1] = modifyColor(col, "r", diff);
		toRet[2] = modifyColor(col, "g", diff);
		toRet[3] = modifyColor(col, "b", diff);
		toRet[4] = modifyColor(col, "r", -diff);
		toRet[5] = modifyColor(col, "g", -diff);
		toRet[6] = modifyColor(col, "b", -diff);
		return toRet;
	}

	private Color modifyColor(Color col, String var, int val) {
		switch (var) {
		case "r":
			return new Color(bind(col.getRed() + val, 0, 255), col.getGreen(), col.getBlue());
		case "g":
			return new Color(col.getRed(), bind(col.getGreen() + val, 0, 255), col.getBlue());
		case "b":
			return new Color(col.getRed(), col.getGreen(), bind(col.getBlue() + val, 0, 255));
		default:
			return Color.BLACK;
		}
	}

	private int bind(int val, int min, int max) {
		int toRet = (val < max) ? val : max;
		toRet = (toRet > min) ? toRet : min;
		return toRet;
	}

}

class SliderPanel2 extends JPanel {
	private static final long serialVersionUID = 537057276744422663L;
	
	private ImprovedColorPanel colPnl;
	private SubSliderPanel rPnl, gPnl, bPnl;

	public SliderPanel2(ImprovedColorPanel colPnl) {
		super();
		this.colPnl = colPnl;
		setLayout(null);
		rPnl = new SubSliderPanel("R", colPnl);
		gPnl = new SubSliderPanel("G", colPnl);
		bPnl = new SubSliderPanel("B", colPnl);
		add(rPnl);
		add(gPnl);
		add(bPnl);
		rPnl.setBounds(0, 0, 300, 50);
		gPnl.setBounds(0, 50, 300, 50);
		bPnl.setBounds(0, 100, 300, 50);

	}

	public void setSlidersColor(Color col) {
		rPnl.setSliderValue(col.getRed());
		gPnl.setSliderValue(col.getGreen());
		bPnl.setSliderValue(col.getBlue());
	}
}

class SubSliderPanel extends JPanel {
	private static final long serialVersionUID = -7412969995806561350L;
	
	private String var;
	private final int INITIAL_VAL = 0;
	private ImprovedColorPanel colPnl;
	private JSlider slid;

	public SubSliderPanel(String var, ImprovedColorPanel colPnl) {
		this.var = var;
		this.colPnl = colPnl;

		JLabel label = new JLabel(var + " : ");
		slid = new JSlider();
		JTextField field = new JTextField();
		slid.setMinimum(0);
		slid.setMaximum(255);
		slid.setValue(INITIAL_VAL);
		field.setText(INITIAL_VAL + "");

		setLayout(null);

		slid.addChangeListener(x -> sliderChange(slid, field, var));
		field.addActionListener(x -> fieldEntered(slid, field, var));

		add(label);
		add(slid);
		add(field);

		label.setBounds(10, 0, 20, 50);
		slid.setBounds(30, 3, 200, 50);
		field.setBounds(240, 10, 40, 30);
	}

	private void fieldEntered(JSlider slid, JTextField field, String var) {
		try {
			slid.setValue(Integer.parseInt(field.getText()));
			colPnl.setColorVar(var, slid.getValue());
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
	}

	private void sliderChange(JSlider slid, JTextField field, String var) {
		field.setText(slid.getValue() + "");
		colPnl.setColorVar(var, slid.getValue());
	}

	public void setSliderValue(int val) {
		slid.setValue(val);
	}
}